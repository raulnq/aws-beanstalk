Resources:
  AdditionalAWSEBLoadBalancerSecurityGroup:
    Properties:
      GroupDescription: Load Balancer Security Group
      VpcId:
        Fn::GetOptionSetting: 
          Namespace: 'aws:ec2:vpc'
          OptionName: 'VPCId'
          DefaultValue: 'abc'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: '443'
          ToPort: '443'
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
          IpProtocol: tcp
    Type: 'AWS::EC2::SecurityGroup'
  AdditionalAWSEBV2LoadBalancer:
    Properties:
      SecurityGroups:
        - { "Ref" : "AdditionalAWSEBLoadBalancerSecurityGroup" }
      Subnets:
        Fn::Split:
          - ','
          - Fn::GetOptionSetting:
              Namespace: 'aws:elasticbeanstalk:customoption'
              OptionName: 'PublicELBSubnets'
              DefaultValue: 'abc'
      Scheme: internet-facing
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
  AddtionalAWSEBV2LoadBalancerListener:
    Properties:
      LoadBalancerArn: { "Ref" : "AdditionalAWSEBV2LoadBalancer" }
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Path: '/#{path}'
            Query: '#{query}'
            Port: '443'
            Host: '#{host}'
            Protocol: HTTPS
            StatusCode: HTTP_301
      Port: 80
      Protocol: HTTP
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
  AdditionalAWSEBV2LoadBalancerListener443:
    Properties:
      SslPolicy: ELBSecurityPolicy-2016-08
      LoadBalancerArn: { "Ref" : "AdditionalAWSEBV2LoadBalancer" }
      Port: '443'
      DefaultActions:
        - TargetGroupArn: { "Ref" : "AdditionalAWSEBV2LoadBalancerTargetGroup" }
          Type: forward
      Certificates:
        - CertificateArn:
            Fn::GetOptionSetting: 
              Namespace: 'aws:elasticbeanstalk:customoption'
              OptionName: 'PublicSSLCertificateArns'
              DefaultValue: 'abc'
      Protocol: HTTPS
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
  AdditionalAWSEBV2LoadBalancerTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 15
      VpcId:
        Fn::GetOptionSetting: 
          Namespace: 'aws:ec2:vpc'
          OptionName: 'VPCId'
          DefaultValue: 'abc'
      HealthyThresholdCount: 3
      HealthCheckPath: 
        Fn::GetOptionSetting:
          Namespace: 'aws:elasticbeanstalk:environment:process:default'
          OptionName: 'HealthCheckPath'
          DefaultValue: 'abc'
      Port: 80
      TargetGroupAttributes:
        - Value: '20'
          Key: deregistration_delay.timeout_seconds
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 5
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  AWSEBAutoScalingGroup :
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      TargetGroupARNs:
        - { "Ref" : "AWSEBV2LoadBalancerTargetGroup" }
        - { "Ref" : "AdditionalAWSEBV2LoadBalancerTargetGroup" }
  AWSEBSecurityGroup:
    Properties:
      SecurityGroupIngress:
        - FromPort: '80'
          ToPort: '80'
          IpProtocol: tcp
          SourceSecurityGroupId: { "Ref" : "AWSEBLoadBalancerSecurityGroup" }
        - FromPort: '80'
          ToPort: '80'
          IpProtocol: tcp
          SourceSecurityGroupId: { "Ref" : "AdditionalAWSEBLoadBalancerSecurityGroup" }
    Type: 'AWS::EC2::SecurityGroup'